import Wallet from '../models/wallet.js';
import tronWebPromise from '../config/tron.js';
import { sendPaymentNotification } from './emailService.js';

const USDT_CONTRACT = 'TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj';

async function checkWalletsForPayments() {
  const tronWeb = await tronWebPromise;
  const now = new Date();

  // –ë–µ—Ä—ë–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
  const wallets = await Wallet.find({ status: 'pending', ttl: { $gt: now } });

  for (const wallet of wallets) {
    try {
      const transactions = await tronWeb.trx.getTransactionsRelated(wallet.address, 'to');

      for (const tx of transactions) {
        // 1Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (!tx.ret || tx.ret[0].contractRet !== 'SUCCESS') continue;

        // 2Ô∏è –ò—â–µ–º –≤—ã–∑–æ–≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const contractData = tx.raw_data?.contract[0];
        if (!contractData || contractData.type !== 'TriggerSmartContract') continue;

        // 3Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        const value = contractData.parameter.value;
        if (!value.contract_address || value.contract_address.toUpperCase() !== USDT_CONTRACT.toUpperCase()) continue;

        // 4Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USDT
        const amount = Number(value.amount) / 1_000_000;

        // 5Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (–µ—Å–ª–∏ –Ω–µ—Ç expectedAmount ‚Äî —É–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ)
        if (!wallet.expectedAmount || amount >= wallet.expectedAmount) {
          console.log(`üí∞ –û–ø–ª–∞—Ç–∞ ${amount} USDT –¥–ª—è ${wallet.address}`);
          
          wallet.status = 'paid';
          wallet.usdtReceived = amount;
          await wallet.save();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
          await sendPaymentNotification(wallet.orderId, wallet.address, amount);
          break; // –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        } else {
          console.log(`‚ö† –ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂ ${amount} USDT –¥–ª—è ${wallet.address}, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${wallet.expectedAmount}`);
        }
      }
    } catch (err) {
      console.error(`Error checking wallet ${wallet.address}:`, err.message);
    }
  }
}

export function startPaymentMonitor() {
  console.log('Payment monitor started...');
  setInterval(checkWalletsForPayments, 30_000);
}
